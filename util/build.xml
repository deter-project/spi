<!--

    This controls building the DeterAPI utilities.

    Targets are:

    compile.util: compiles the utilities into build/classes
    generate.jar: generates a jar file from which the utilities run
    clean: obliterate build

    This began as a sample build file from axis2 and is being modified pretty
    heavily.
-->
<project name="DeterUtils" default="generate.jar">

  <!-- load the environment into properties -->
  <property environment="env"/>
  <!-- local axis2 install root -->
  <property name="AXIS2_HOME" value="${env.AXIS2_HOME}"/>
  <!-- Where the OS traditionally saves shared classes -->
  <property name="JAVA_SHARED_CLASSES" value="${env.JAVA_SHARED_CLASSES}"/>
  <!-- service working directory root -->
  <property name="build.dir" value="${basedir}/build"/> 
  <!-- Directory in which autogenerated WSDL accessors live -->
  <property name="relative.service.dir" value="${basedir}/../service"/>
  <!-- utility source root -->
  <property name="src.dir" value="src"/> 
  <!-- jar file -->
  <property name="jar.name" value="util.jar"/>
  <!-- class that knows how to run other utility classes -->
  <property name="dispatch.class" value="net.deterlab.testbed.util.Dispatch"/>
  <!-- class that runs regression tests-->
  <property name="regression.nologin.class" value="net.deterlab.testbed.util.regression.RegressionNoLogin"/>
  <property name="regression.class" value="net.deterlab.testbed.util.regression.Regression"/>

  <!-- classpath to include axis2 classes -->
  <path id="axis2.classpath">
    <fileset dir="${AXIS2_HOME}/lib">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- classpath to include local library classes (mysql, commons) -->
  <path id="commons.classpath">
    <fileset dir="${JAVA_SHARED_CLASSES}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- classpath to include local (ABAC) classes -->
  <path id="local.classpath">
    <fileset dir="${relative.service.dir}/lib">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- classpath to include access libs -->
  <path id="access.classpath">
    <fileset dir="${relative.service.dir}/build/jar">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- Classpath to include local, tomcat and axis -->
  <path id="all.classpath">
    <path refid="commons.classpath"/>
    <path refid="local.classpath"/>
    <path refid="access.classpath"/>
    <!-- Yipe: axis2 ships with some very old implementations.... Don't let
	 them hide the right stuff -->
    <path refid="axis2.classpath"/>
  </path>

  <!-- compile the utilities -->
  <target name="compile.util" >
    <mkdir dir="${basedir}/build"/>
    <mkdir dir="${basedir}/build/classes"/>
    <javac debug="on" fork="true" destdir="${basedir}/build/classes" 
      srcdir="${basedir}/src" 
      includeAntRuntime="no">
	<classpath>
	  <path refid="all.classpath"/>
	</classpath>
    </javac>
  </target>

  <!-- build the jar file -->
  <target name="generate.jar" depends="compile.util">
    <mkdir dir="${build.dir}/jar"/>
    <pathconvert property="jar.classpath" pathsep=" " refid="all.classpath"/>
    <jar destfile="${build.dir}/jar/${jar.name}">
      <fileset dir="${build.dir}/classes"/>
      <manifest>
	<attribute name="Class-Path" value="${jar.classpath}"/>
	<attribute name="Main-Class" value="${dispatch.class}"/>
      </manifest>
    </jar>
  </target>

  <!-- run regressions -->
  <target name="regression-test" depends="compile.util">
    <delete dir="regression"/>
    <mkdir dir="regression"/>
    <java classname="${regression.nologin.class}" fork="true">
      <classpath>
	<path refid="all.classpath"/>
	<pathelement path="${basedir}/build/classes"/>
      </classpath>
      <arg file="regression"/>
      <arg value="0"/>
      <arg file="regression_data"/>
    </java>
    <java classname="${regression.class}" fork="true">
      <classpath>
	<path refid="all.classpath"/>
	<pathelement path="${basedir}/build/classes"/>
      </classpath>
      <arg file="regression"/>
      <arg value="1"/>
      <arg file="regression_data"/>
      <arg value="${env.USER}"/>
    </java>
    <exec executable="/usr/bin/perl">
      <arg file="format_regression.pl"/>
      <arg file="./regression"/>
    </exec>
    <exec executable="/usr/bin/perl">
      <arg file="make_index.pl"/>
      <arg file="./regression"/>
    </exec>
  </target>

   <!-- clean up -->
  <target name="clean">
      <delete dir="${build.dir}"/>
  </target>
</project>
