
INSTALLING TOMCAT 

Install tomcat from ports/packages on boss.  On a real boss, that's 

$ cd /usr/ports/www/tomcat7
$ sudo make install

On an elab-in-elab you have to set up the package loading system by
adding the package host to /etc/hosts and setting the PACKAGEROOT
environment variable.  On DETERlab add this line to /etc/hosts

192.168.253.3	scratch

Note that scratch has been known to change IP address.

And set this environment variable

$ export PACKAGEROOT=http://scratch

Then

$ sudo -E pkg_add -r tomcat7

(The -E option passes the user environment into the sudoed process so
pkg_add can see the PACKAGEROOT environment variable).

Add tomcat7_enable="YES" to /etc/rc.conf and start tomcat with
$ sudo /usr/local/etc/rc.d/tomcat7 start

Using openjdk7 - which we do - do:

$ sudo -E pkg_add -r openjdk7
$ sudo -E pkg delete -f openjdk6

Set 
tomcat7_java_home=/usr/local/openjdk7
in /etc/rc.conf

You can find the correct JAVA_HOME by:

$ JAVA_VERSION=1.7 JAVAVM_DRYRUN=1 javavm

You should be able to telnet to localhost 8080 and get a connection.
Lynx from users to port 8080 on the e-in-e inner boss should show the
tomcat start page.

jdk8 also works

INSTALLING AXIS

First you'll need apache ant:

$ sudo -E pkg_add -r apache-ant

The FreeBSD axis2 port does not install the WSDL supporting scripts that
we use.  Download the binary disro from 

http://axis.apache.org/axis2/java/core/

And follow the instructions to create a .war to deploy in the tomcat
servlet.

(If you're installing on e-in-e, this will involve downloading the
zipfile to users and then from users to the inner boss.  The inner boss
is doing its best to ignore the outer users, so the copy will go from
outer users to inner boss (scp runs on outer users).)

Just follow the installation guide at 
http://axis.apache.org/axis2/java/core/docs/installationguide.html

directly.  Unzip the distro in /usr/local/share/java and set AXIS2_HOME
to the axis2-{version} directory that was in the zip.

My values for JAVA_HOME and AXIS2_HOME (for axis2 1.6.2) are

$ export AXIS2_HOME=/usr/local/share/java/axis2-1.6.2 
$ export JAVA_HOME=/usr/local/openjdk6/

NB: the axis docs mention AXIS_HOME, ut AXIS2_HOME is the relevant
variable.

This installs axis:

$ cd $AXIS2_HOME/webapp
$ sudo ant create.war
# Nuke the site from orbit.
$ sudo rm -rf /usr/local/apache-tomcat-7.0/webapps/axis2*
$ sudo mv ../dist/axis2.war /usr/local/apache-tomcat-7.0/webapps/
$ sudo /usr/local/etc/rc.d/tomcat7 restart

At this point
http://boss:8080/axis2 should
display the axis pages.

If you are in an e-in-e in experiment/project, the hostname will have to
be: http://myboss.experiment.project.isi.deterlab.net:8080/axis2 

INSTALLING SUPPORT PACKAGES

We will also need the mysql and password encryption packages.  To get
these:

$ sudo -E pkg_add -r mysql-connector-java
$ sudo -E pkg_add -r jakarta-commons-codec

We need to tell tomcat where these packages are.  To do that, edit
/etc/rc.conf and set

tomcat7_classpath=":/usr/local/share/java/classes/mysql-connector-java.jar:/usr/local/share/java/classes/commons-codec.jar"

The leading colon (:) is required.

Under Linux you need to put the jar files for commons codec
and mysql into /usr/share/tomcat/lib so that tomcat can find it.

Restart tomcat.

SETTING UP SSL

Follow the instructions on
http://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html to set up an SSL
certificate etc for boss.  This discusses how to generate a self-signed
certificate to get started.  We will update to include importing certs.

Create a key:

$ keytool -genkey -alias tomcat -keyalg RSA -keystore ./keystore

Use the "changeit" password that tomcat expects.  Secure installations
will change it later.

Add the following connector clause to
/usr/local/apache-tomcat-7.0/conf/server.xml

Put it near the existing uncommented Connector on port 8080.

<Connector port="52323" protocol="HTTP/1.1" SSLEnabled="true"
	maxThreads="150" scheme="https" secure="true"
	clientAuth="want" sslProtocol="TLS"
	keystoreFile="conf/tomcat.keystore" keystorePass="changeit"
	truststoreFile="conf/tomcat.keystore" truststorePass="changeit" />

Note that the same keystore is for trust and this server's keys.  It
will trust client connections that are made with certificates it signed.

Note that clientAuth must be "want" for clients to present certs

Move the keystore created above to
/usr/local/apache-tomcat-7.0/conf/tomcat.keystore

Set its ownership to www:www or the tomcat user.

$ sudo mv ./keystore /usr/local/apache-tomcat-7.0/conf/tomcat.keystore

This keystore name needs to appear in /usr/local/etc/deter/service.properties
as the keystore property and the password needs to be in keystorepw

Comment out the port 8080 connector.

Restart tomcat and confirm that the https://localhost:52323 displays the
Tomcat hello page (and the HTTPS lock).  

You will need to allow the self-signed certificate aas a security
exception.

At this point tomcat should work, but axis2 is broken.

You may also need to import the server key into trust keystores, e.g for
regression test tools.  The command to export is:

$ keytool -exportcert -keystore /usr/local/apache-tomcat-7.0/conf/tomcat.keystore -alias tomcat -file ~/tomcat.export

And the import is:

$ keytool -import -keystore ~/keystore -file ~/tomcat.export -alias testenv2 

Alias can be any one of a number of things.

SETTING UP AXIS2 FOR SSL

Edit $AXIS2_HOME/conf/axis2.xml and add this transportReceiver clause (right
below the existing transport receiver clause)

<transportReceiver name="https"
	class="org.apache.axis2.transport.http.SimpleHTTPServer">
	<parameter name="port">52323</parameter>
</transportReceiver>

Note that the port here must match the port in the tomcat Connector.

Remake and reinstall the axis2.war file as above.  Don't forget this.
If you do not update the axis2.war file, everything will look correct
*except* there will be an internal server error when listing services.
Don't forget to nuke the site from orbit.

Everything should work as before.

SETTING UP DETER's SERVICE

You'll need the following environment variables set:

$ export `JAVA_VERSION=1.7 JAVAVM_DRYRUN=yes java | grep JAVA_HOME`
$ export AXIS2_HOME=/usr/local/share/java/axis2-1.6.2
$ export CATALINA_HOME=/usr/local/apache-tomcat-7.0
$ export TOMCAT_CLASSES=/usr/local/apache-tomcat-7.0/lib
$ export JAVA_SHARED_CLASSES=/usr/local/share/java/classes

I put them into .profile

Get the DeterAPI source onto boss.  On an internet connected boss, clone
the repo.  On e-in-e, clone the repo to outer users and copy it across to the
inner boss, e.g from outer users:

$ tar cf - DeterAPI | ssh pc126 tar -C src -xf -

Set up the deter support directories:

$ sudo mkdir -p /usr/local/etc/deter/policy/
$ sudo mkdir -p /usr/local/etc/deter/experiments/
$ sudo mkdir -p /usr/local/etc/deter/realizations/
$ sudo chown -R www:www /usr/local/etc/deter
$ sudo chmod -R 775 /usr/local/etc/deter
$ sudo mkdir -p /var/log/deter/
$ sudo chown -R www:www /var/log/deter/
$ sudo chmod -R 775 /var/log/deter
$ sudo touch /var/log/deter/service.log
$ sudo chown -R www:www /var/log/deter/service.log

Set up a spot for the service aar file:

$ sudo -E touch $CATALINA_HOME/webapps/axis2/WEB-INF/services/DeterAPI.aar
$ sudo chown www:www $CATALINA_HOME/webapps/axis2/WEB-INF/services/DeterAPI.aar
$ sudo chmod 664 $CATALINA_HOME/webapps/axis2/WEB-INF/services/DeterAPI.aar

Make sure you are in group www - you will have to log out and in.

INSTALLING XMLRPC

Get the most recent XMLRPC implementation from Apache:
http://archive.apache.org/dist/ws/xmlrpc/

Install the jar files in the lib directory of that tar file into
JAVA_SHARED_CLASSES

BACK TO SERVICE INSTALL

The initServiceProps script in the repo can set the service properties
correctly.  Compile the utilities using ant first.

Build and install the service:

$ ant generate.service
$ ant install.service

And restart tomcat.  At this point the DETER services should appear.
You can call axis2/services/ApiInfo/getVersion without client
certificates and see the version and patch level.

SETTING UP MYSQL TO USE THE NETWORK

Mysql must talk to the network in order for the DETER API to talk to it.
Edit /usr/local/etc/rc.d/2.mysql-server.sh and remove the
--skip-networking.  If boss runs a firewall, make sure that the default
mysql port is open.

You will also need to add the mysql classes to tomcat's path

Restart mysqld:

$ sudo /usr/local/etc/rc.d/2.mysql-server.sh stop
$ sudo /usr/local/etc/rc.d/2.mysql-server.sh start

INSTALL DETER SQL USER AND SCHEMA

Edit /usr/local/etc/rc.d/2.mysql-server.sh to remove --skip-grant-tables so
we can install a deter user. Restart mysql.

$ sudo /usr/local/etc/rc.d/2.mysql-server.sh stop
$ sudo /usr/local/etc/rc.d/2.mysql-server.sh start

Add a DETER user and database (the emulab install has a root user with no
password...):

$ mysql -u root
mysql> CREATE USER 'deter'@'localhost' IDENTIFIED BY 'deter';
mysql> CREATE DATABASE deter;
mysql> GRANT ALL PRIVILEGES ON deter.* TO 'deter'@'localhost';
mysql> FLUSH PRIVILEGES;

Confirm that you can still access any extant emulab databases:

$ mysql tbdb

If not - e.g., if you see an error like:

ERROR 1044 (42000): Access denied for user ''@'localhost' to database 'tbdb'

Restore anonymous access using:

mysql> GRANT ALL PRIVILEGES ON tbdb.* TO ''@'localhost';
mysql> GRANT ALL PRIVILEGES ON tbdb.* TO ''@'%';
mysql> FLUSH PRIVILEGES;

And restart mysqld for good measure.

Import the schema (from src/DeterAPI):

$ mysql -u deter -p deter < db/format.mysql
Enter password:

The password is the one used above when we created the deter user.

You can check by:

$ mysql -u deter -p deter
Enter password:
mysql> desc experiments;
+----------+---------------+------+-----+---------+----------------+
| Field    | Type          | Null | Key | Default | Extra          |
+----------+---------------+------+-----+---------+----------------+
| idx      | int(11)       | NO   | PRI | NULL    | auto_increment |
| eid      | varchar(256)  | YES  | UNI | NULL    |                |
| owneridx | int(11)       | NO   | MUL | NULL    |                |
| compdir  | varchar(1024) | YES  |     | NULL    |                |
+----------+---------------+------+-----+---------+----------------+
4 rows in set (0.02 sec)

Restore --skip-grant-tables to /usr/local/etc/rc.d/2.mysql-server.sh and
restart mysql

TOMCAT AND MYSQL

This first section seems to be obsolite.

FreeBSD's tomcat install is .... odd.  The approved tomcat way to
connect up mysql includes changes to both tomcat's config and axis2's
config.  The database needs to be made accessible by adding 

<Resource name="jdbc/deter" auth="Container"
    type="javax.sql.DataSource"
    maxActive="100" maxIdle="30" maxWait="10000"
    username="username" password="password" 
    driverClassName="com.mysql.jdbc.Driver"
    url="jdbc:mysql://localhost:3306/deter"/>

to $CATALINA_HOME/conf/context.xml

This remains important

Then change $AXIS2_HOME/webapp/WEB-INF/web.xml to reference this:

<resource-ref>
    <description>DETER DB</description>
    <res-ref-name>jdbc/deter</res-ref-name>
    <res-type>javax.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
</resource-ref>

Remove any installed axis2 tree under tomcat, remake axis2.war and
install.  Restart tomcat to restore the axis2 tree.

Reinstall the deter service, and restart tomcat:

$ sudo touch $CATALINA_HOME/webapps/axis2/WEB-INF/services/DeterAPI.aar
$ sudo chown www:www $CATALINA_HOME/webapps/axis2/WEB-INF/services/DeterAPI.aar
$ sudo chmod 664 $CATALINA_HOME/webapps/axis2/WEB-INF/services/DeterAPI.aar
$ cd src/DeterAPI
$ ant clean
$ ant install.service
$ sudo /usr/local/etc/rc.d/tomcat7 restart

and restart
tomcat.

BRIDGING FROM INSIDE E-IN-E

First we need to connect an ssh tunnel to the main interface:

$ ssh -N -L *:52323:localhost:52323 myboss.testenvironment2.tutorial2011

The * is key.

Second we need to connect mail.  This is two steps.  Add 

mailer=/users/faber/src/DeterAPI/util/e-in-e_mail.pl

to /usr/local/etc/deter/service.properties

Start 

./deter/DeterAPI/util/e-in-e_forward.pl > fwd.log 2>&1 &

XMLRPC SETUP - TRUSTED CERTIFICATES

The same sort of input as for the trusted tomcat certificate must be
used to import the emulab certificate.  I imported into
/usr/local/deter/trusted.jks with the "changeit" password.  Put the path
to that keystore in the xmlrpcTrust variable in the
/usr/local/etc/deter/service.properties file.

LOGGING

Descartes uses the standard java logging facilities.  Create or copy a
logging configuration into /usr/local/etc/deter/log4j.properties.  I
used:

---
# logging for DeterServices
#

# For debugging this configuration set this variable true and look at
tomcat's
# stderr.
log4j.debug=true

# Rolling log appender to put out into /var/log/deter
log4j.appender.A1=org.apache.log4j.RollingFileAppender
log4j.appender.A1.MaxFileSize=10MB
log4j.appender.A1.MaxBackupIndex=3
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%d{MM/dd HH:mm:ss} %-5p
%c{1}: %m%n
log4j.appender.A1.file=/var/log/deter/service.log

# The net.deterlab logger will inherit the root level and use the
# /var/log/deter appender above.  It will not log to the root.
log4j.logger.net.deterlab=DEBUG, A1
log4j.additivity.net.deterlab=false

---

The log configuration location is set in
/usr/local/etc/deter/service.properties

The line:
logconfig=/usr/local/etc/deter/log4j.properties

SUBPROCESS PATHS

The subprocesses that run the asynchnronous swapins may need jars set in
their class path.  The embedderClasses service property (in
/usr/local/etc/deter/service.properties gives a colon separated list of
additional paths to add.

