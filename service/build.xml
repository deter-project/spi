<!--

    This controls building the DeterAPI web service, and a tomcat plugin to
    allow self-signed client certificates to access the web service.

    Targets are:

    compile.service: compiles the service into build/classes
    generate.wsdl: generates the wsdl description for the service
    generate.service: makes the aar file for the service
    install.service: copies the services aar file into the local tomcat webapps
	directory.  Tomcat usually needs to be restarted at this point.
    compile.manager: compules the tomcat plugin into build/tomcat
    generate.manager: generates the tomcat plugin in build/DeterAPISL.jar
    doc: produce javadoc for public interfaces
    dev-doc: produce javadoc for all interfaces
    clean: obliterate build, doc and dev-doc

    This began as a sample build file from axis2 and is being modified pretty
    heavily.
-->
<project name="DeterAPI" default="generate.service">

  <!-- load the environment into properties -->
  <property environment="env"/>
  <!-- local axis2 install root -->
  <property name="AXIS2_HOME" value="${env.AXIS2_HOME}"/>
  <!-- local tomcat install root. Catalina seems to be traditional. -->
  <property name="CATALINA_HOME" value="${env.CATALINA_HOME}"/>
  <!-- local tomcat install root. Catalina seems to be traditional. -->
  <property name="JAVA_SHARED_CLASSES" value="${env.JAVA_SHARED_CLASSES}"/>
  <!-- Tomcat classes for compilation -->
  <property name="TOMCAT_CLASSES" value="${env.TOMCAT_CLASSES}"/>
  <!-- destination for webapps in tomcat -->
  <property name="webapps.home" value="${CATALINA_HOME}/webapps"/>
  <!-- destination for webapps in axis2 -->
  <property name="service.home" value="${webapps.home}/axis2/WEB-INF/services/"/>
  <!-- service working directory root -->
  <property name="build.dir" value="build"/> 
  <!-- Directory in which autogenerated admin WSDL accessors live -->
  <property name="admin.dir" value="admin"/>
  <!-- Directory in which autogenerated apiinfo WSDL accessors live -->
  <property name="apiinfo.dir" value="apiinfo"/>
  <!-- Directory in which autogenerated circles WSDL accessors live -->
  <property name="circles.dir" value="circles"/>
  <!-- Directory in which autogenerated experiments WSDL accessors live -->
  <property name="experiments.dir" value="experiments"/>
  <!-- Directory in which autogenerated libraries WSDL accessors live -->
  <property name="libraries.dir" value="libraries"/>
  <!-- Directory in which autogenerated projects WSDL accessors live -->
  <property name="projects.dir" value="projects"/>
  <!-- Directory in which autogenerated resources WSDL accessors live -->
  <property name="resources.dir" value="DETERresources"/>
  <!-- Directory in which autogenerated realizations WSDL accessors live -->
  <property name="realizations.dir" value="realizations"/>
  <!-- Directory in which autogenerated users WSDL accessors live -->
  <property name="users.dir" value="users"/>
  <!-- our service source root -->
  <property name="src.dir" value="src"/> 
  <!-- our documentation source root -->
  <property name="doc.dir" value="doc"/> 
  <!-- Directory to hold logging config for compiling wsdl -->
  <property name="wsdl.dir" value="wsdllib"/> 
  <!-- our developer documentation source root -->
  <property name="devdoc.dir" value="dev-doc"/> 
  <!-- Service aar filename-->
  <property name="service.aar" value="DeterAPI.aar"/>
  <!-- Service jar filename-->
  <property name="service.jar" value="DeterAPI.jar"/>
  <!-- Plugin jar filename-->
  <property name="manager.jar" value="DeterTrustManager.jar"/>

  <!-- classpath to include axis2 classes -->
  <path id="axis2.classpath">
    <fileset dir="${AXIS2_HOME}/lib">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- classpath to include tomcat classes -->
  <path id="tomcat.classpath">
    <fileset dir="${TOMCAT_CLASSES}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- classpath to include local library classes (mysql, commons) -->
  <path id="commons.classpath">
    <fileset dir="${JAVA_SHARED_CLASSES}">
      <include name="*.jar"/>
    </fileset>
  </path>


  <!-- classpath to include local (ABAC) classes -->
  <path id="local.classpath">
    <fileset dir="${basedir}/lib">
      <include name="*.jar"/>
    </fileset>
  </path>


  <!-- classpath to include access libs -->
  <path id="access.classpath">
    <fileset dir="${build.dir}/lib">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- Classpath to include local, tomcat and axis -->
  <path id="all.classpath">
    <path refid="tomcat.classpath"/>
    <path refid="commons.classpath"/>
    <path refid="local.classpath"/>
    <path refid="access.classpath"/>
    <!-- Yipe: axis2 ships with some very old implementations.... Don't let
	 them hide the right stuff -->
    <path refid="axis2.classpath"/>
  </path>

  <!-- Classpath to include all compilation and the wsdl logging defs-->
  <path id="wsdl.classpath">
    <path refid="all.classpath"/>
    <fileset dir="${wsdl.dir}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- compile the DeterAPI -->
  <target name="compile.service">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dir}/classes"/>
    <mkdir dir="${build.dir}/lib"/>
    <javac debug="on" fork="true" destdir="${build.dir}/classes" 
      srcdir="${basedir}/src" classpathref="all.classpath"
      includeAntRuntime="no">
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <!-- compile the Tomcat pulgin -->
  <target name="compile.manager">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dir}/tomcat"/>
    <mkdir dir="${build.dir}/tomcat/classes"/>
    <javac debug="on" fork="true" destdir="${build.dir}/tomcat/classes" 
      srcdir="${basedir}/tomcat"
      includeAntRuntime="no"/>
  </target>

  <!-- generate the plugin jar file -->
  <target name="generate.manager" depends="compile.manager">
     <jar destfile="${build.dir}/${manager.jar}">
       <fileset dir="${build.dir}/tomcat/classes"/>
     </jar>
   </target>

  <!-- Remove the service file if any of its dependencies have changed.  If the
       file is still there set the service.exists property -->
  <target name="check.service">
    <dependset>
      <srcfileset dir="${build.dir}/classes">
	<include name="**/*.class"/>
      </srcfileset>
      <targetfileset dir="${build.dir}">
	<include name="**/*.aar"/>
      </targetfileset>
    </dependset>
    <available file="${build.dir}/jar/${service.aar}" 
      property="service.exists"/>
  </target>

  <!-- generate service aar file -->
  <target name="generate.service" depends="compile.service,check.service"
    unless="service.exists">
    <mkdir dir="${build.dir}/jar"/>
    <copy toDir="${build.dir}/classes" >
       <fileset dir="${basedir}/resources">
         <include name="**/*.xml"/>
       </fileset>
     </copy>
     <copy toDir="${build.dir}/classes/lib" >
       <fileset dir="${basedir}/lib">
         <include name="**/*.jar"/>
       </fileset>
     </copy>
     <jar destfile="${build.dir}/jar/${service.aar}">
       <fileset dir="${build.dir}/classes"/>
     </jar>
     <delete dir="${build.dir}/classes/lib"/>
     <delete dir="${build.dir}/classes/META-INF"/>
   </target>

  <!-- generate service jar file -->
  <target name="generate.jar" depends="generate.service">
    <jar destfile="${build.dir}/jar/${service.jar}">
      <fileset dir="${build.dir}/classes"/>
     </jar>
   </target>

   <!-- copy the service to axis2's deploy directory.  Permissions on the
	underlying filesystem will have to be set to allow this. -->
   <target name="install.service" depends="generate.service">
     <copy tofile="${service.home}/${service.aar}" 
       file="${build.dir}/jar/${service.aar}"/>
   </target>

  <!-- Clear out any documents older than their sources -->
  <target name="check.doc">
    <dependset>
      <srcfileset dir="${src.dir}">
	<include name="**/*.java"/>
      </srcfileset>
      <targetfileset dir="${doc.dir}"/>
    </dependset>
    <available file="${doc.dir}/index.html" property="doc.exists"/>
  </target>

   <!-- Produce javadoc for the DeterAPI service -->
   <target name="doc" depends="compile.service,check.doc" 
     unless="${doc.exists}">
    <mkdir dir="${doc.dir}"/>
    <javadoc sourcepath="${src.dir}" destdir="${doc.dir}"
      classpathref="all.classpath" access="public"
      noqualifier="java.lang:java.io:java.util:java.security:java.security.cert"/>
  </target>

   <!-- Produce developers javadoc for the DeterAPI service.  Includes
	protected and private members. -->
  <target name="dev-doc" description="Generate developer API documentation">
    <mkdir dir="${doc.dir}"/>
    <javadoc sourcepath="${src.dir}" destdir="${devdoc.dir}" access="private"
      classpathref="all.classpath" 
      noqualifier="java.lang:java.io:java.util:java.security:java.security.cert"/>
  </target>

  <!-- generate a jar file with logging properties for wsdl generation-->
  <target name="generate.logproperties">
    <mkdir dir="${wsdl.dir}"/>
    <jar destfile="${wsdl.dir}/logproperties.jar">
      <fileset dir="lib">
	<include name="log4j.properties"/>
      </fileset>
     </jar>
   </target>

  <!-- Clear out any wsdl older than it's sources -->
  <target name="check.wsdl">
    <dependset>
      <srcfileset dir="${build.dir}/classes">
	<include name="**/*.class"/>
      </srcfileset>
      <targetfileset dir="${build.dir}">
	<include name="**/*.wsdl"/>
      </targetfileset>
    </dependset>
  </target>

  <!-- Set the admin.wsdl.exists property if the wsdl has been compiled -->
  <target name="check.admin.wsdl" depends="check.wsdl">
    <available file="${build.dir}/Admin.wsdl" property="admin.wsdl.exists"/>
  </target>

  <!-- Set the apiinfo.wsdl.exists property if the wsdl has been compiled -->
  <target name="check.apiinfo.wsdl" depends="check.wsdl">
    <available file="${build.dir}/ApiInfo.wsdl" property="apiinfo.wsdl.exists"/>
  </target>

  <!-- Set the circles.wsdl.exists property if the wsdl has been compiled -->
  <target name="check.circles.wsdl" depends="check.wsdl">
    <available file="${build.dir}/Circles.wsdl" property="circles.wsdl.exists"/>
  </target>

  <!-- Set the experiments.wsdl.exists property if the wsdl has been
       compiled -->
  <target name="check.experiments.wsdl" depends="check.wsdl">
    <available file="${build.dir}/Experiments.wsdl"
      property="experiments.wsdl.exists"/>
  </target>

  <!-- Set the libraries.wsdl.exists property if the wsdl has been
       compiled -->
  <target name="check.libraries.wsdl" depends="check.wsdl">
    <available file="${build.dir}/Libraries.wsdl"
      property="libraries.wsdl.exists"/>
  </target>

  <!-- Set the projects.wsdl.exists property if the wsdl has been compiled -->
  <target name="check.projects.wsdl" depends="check.wsdl">
    <available file="${build.dir}/Projects.wsdl" 
      property="projects.wsdl.exists"/>
  </target>

  <!-- Set the resources.wsdl.exists property if the wsdl has been compiled -->
  <target name="check.resources.wsdl" depends="check.wsdl">
    <available file="${build.dir}/Resources.wsdl"
      property="resources.wsdl.exists"/>
  </target>

  <!-- Set the realizations.wsdl.exists property if the wsdl has been
       compiled -->
  <target name="check.realizations.wsdl" depends="check.wsdl">
    <available file="${build.dir}/Realizations.wsdl"
      property="realizations.wsdl.exists"/>
  </target>

  <!-- Set the users.wsdl.exists property if the wsdl has been compiled -->
  <target name="check.users.wsdl" depends="check.wsdl">
    <available file="${build.dir}/Users.wsdl" property="users.wsdl.exists"/>
  </target>


  <!-- Generate WSDL files for making utility/client programs.
       The axis2 tools for wsdl conversion must be in the axis2.classpath.
       Separate target for each wsdl. -->
  <!-- make the WSDL for Admin if we need it -->
  <target name="generate.admin.wsdl"
    depends="compile.service,check.admin.wsdl,generate.logproperties"
    unless="${admin.wsdl.exists}">
    <!-- task definition for the java2wsdl task (classes in AXIS2) -->
    <taskdef name="java2wsdl"
      classname="org.apache.ws.java2wsdl.Java2WSDLTask"
      classpathref="wsdl.classpath"/>
    <java2wsdl className="net.deterlab.testbed.api.Admin"
      outputLocation="${basedir}/${build.dir}"
      targetNamespace="http://api.testbed.deterlab.net/"
      schemaTargetNamespace="http://api.testbed.deterlab.net/xsd">
      <classpath>
	<pathelement path="${all.classpath}"/>
	<pathelement location="${build.dir}/classes"/>
      </classpath>
    </java2wsdl>
  </target>

  <!-- make the WSDL for ApiInfo if we need it -->
  <target name="generate.apiinfo.wsdl" 
    depends="compile.service,check.apiinfo.wsdl,generate.logproperties"
    unless="${apiinfo.wsdl.exists}">
    <!-- task definition for the java2wsdl task (classes in AXIS2) -->
    <taskdef name="java2wsdl" 
      classname="org.apache.ws.java2wsdl.Java2WSDLTask" 
      classpathref="wsdl.classpath"/>
    <java2wsdl className="net.deterlab.testbed.api.ApiInfo" 
      outputLocation="${basedir}/${build.dir}"
      targetNamespace="http://api.testbed.deterlab.net/"
      schemaTargetNamespace="http://api.testbed.deterlab.net/xsd">
      <classpath> 
	<pathelement path="${all.classpath}"/>
	<pathelement location="${build.dir}/classes"/> 
      </classpath>
    </java2wsdl>
  </target> 

  <!-- make the WSDL for Circles if we need it -->
  <target name="generate.circles.wsdl"
    depends="compile.service,check.circles.wsdl,generate.logproperties"
    unless="${circles.wsdl.exists}">
    <!-- task definition for the java2wsdl task (classes in AXIS2) -->
    <taskdef name="java2wsdl" 
      classname="org.apache.ws.java2wsdl.Java2WSDLTask" 
      classpathref="wsdl.classpath"/>
    <java2wsdl className="net.deterlab.testbed.api.Circles"
      outputLocation="${basedir}/${build.dir}"
      targetNamespace="http://api.testbed.deterlab.net/"
      schemaTargetNamespace="http://api.testbed.deterlab.net/xsd">
      <classpath> 
	<pathelement path="${all.classpath}"/>
	<pathelement location="${build.dir}/classes"/> 
      </classpath>
    </java2wsdl>
  </target> 

  <!-- make the WSDL for Experiments if we need it -->
  <target name="generate.experiments.wsdl"
    depends="compile.service,check.experiments.wsdl,generate.logproperties"
    unless="${experiments.wsdl.exists}">
    <!-- task definition for the java2wsdl task (classes in AXIS2) -->
    <taskdef name="java2wsdl"
      classname="org.apache.ws.java2wsdl.Java2WSDLTask" 
      classpathref="wsdl.classpath"/>
    <java2wsdl className="net.deterlab.testbed.api.Experiments"
      outputLocation="${basedir}/${build.dir}"
      targetNamespace="http://api.testbed.deterlab.net/"
      schemaTargetNamespace="http://api.testbed.deterlab.net/xsd">
      <classpath> 
	<pathelement path="${all.classpath}"/>
	<pathelement location="${build.dir}/classes"/> 
      </classpath>
    </java2wsdl>
  </target> 

  <!-- make the WSDL for Libraries if we need it -->
  <target name="generate.libraries.wsdl"
    depends="compile.service,check.libraries.wsdl,generate.logproperties"
    unless="${libraries.wsdl.exists}">
    <!-- task definition for the java2wsdl task (classes in AXIS2) -->
    <taskdef name="java2wsdl"
      classname="org.apache.ws.java2wsdl.Java2WSDLTask"
      classpathref="wsdl.classpath"/>
    <java2wsdl className="net.deterlab.testbed.api.Libraries"
      outputLocation="${basedir}/${build.dir}"
      targetNamespace="http://api.testbed.deterlab.net/"
      schemaTargetNamespace="http://api.testbed.deterlab.net/xsd">
      <classpath>
	<pathelement path="${all.classpath}"/>
	<pathelement location="${build.dir}/classes"/>
      </classpath>
    </java2wsdl>
  </target>

  <!-- make the WSDL for Projects if we need it -->
  <target name="generate.projects.wsdl" 
    depends="compile.service,check.projects.wsdl,generate.logproperties"
    unless="${projects.wsdl.exists}">
    <!-- task definition for the java2wsdl task (classes in AXIS2) -->
    <taskdef name="java2wsdl" 
      classname="org.apache.ws.java2wsdl.Java2WSDLTask" 
      classpathref="wsdl.classpath"/>
    <java2wsdl className="net.deterlab.testbed.api.Projects" 
      outputLocation="${basedir}/${build.dir}"
      targetNamespace="http://api.testbed.deterlab.net/"
      schemaTargetNamespace="http://api.testbed.deterlab.net/xsd">
      <classpath> 
	<pathelement path="${all.classpath}"/>
	<pathelement location="${build.dir}/classes"/> 
      </classpath>
    </java2wsdl>
  </target> 

  <!-- make the WSDL for Resources if we need it -->
  <target name="generate.resources.wsdl"
    depends="compile.service,check.resources.wsdl,generate.logproperties"
    unless="${resources.wsdl.exists}">
    <!-- task definition for the java2wsdl task (classes in AXIS2) -->
    <taskdef name="java2wsdl"
      classname="org.apache.ws.java2wsdl.Java2WSDLTask"
      classpathref="wsdl.classpath"/>
    <java2wsdl className="net.deterlab.testbed.api.Resources"
      outputLocation="${basedir}/${build.dir}"
      targetNamespace="http://api.testbed.deterlab.net/"
      schemaTargetNamespace="http://api.testbed.deterlab.net/xsd">
      <classpath>
	<pathelement path="${all.classpath}"/>
	<pathelement location="${build.dir}/classes"/>
      </classpath>
    </java2wsdl>
  </target>

  <!-- make the WSDL for Realizations if we need it -->
  <target name="generate.realizations.wsdl"
    depends="compile.service,check.realizations.wsdl,generate.logproperties"
    unless="${realizations.wsdl.exists}">
    <!-- task definition for the java2wsdl task (classes in AXIS2) -->
    <taskdef name="java2wsdl"
      classname="org.apache.ws.java2wsdl.Java2WSDLTask"
      classpathref="wsdl.classpath"/>
    <java2wsdl className="net.deterlab.testbed.api.Realizations"
      outputLocation="${basedir}/${build.dir}"
      targetNamespace="http://api.testbed.deterlab.net/"
      schemaTargetNamespace="http://api.testbed.deterlab.net/xsd">
      <classpath>
	<pathelement path="${all.classpath}"/>
	<pathelement location="${build.dir}/classes"/>
      </classpath>
    </java2wsdl>
  </target>


  <!-- make the WSDL for Users if we need it -->
  <target name="generate.users.wsdl"
    depends="compile.service,check.users.wsdl,generate.logproperties"
    unless="${users.wsdl.exists}">
    <!-- task definition for the java2wsdl task (classes in AXIS2) -->
    <taskdef name="java2wsdl"
      classname="org.apache.ws.java2wsdl.Java2WSDLTask"
      classpathref="wsdl.classpath"/>
    <java2wsdl className="net.deterlab.testbed.api.Users"
      outputLocation="${basedir}/${build.dir}"
      targetNamespace="http://api.testbed.deterlab.net/"
      schemaTargetNamespace="http://api.testbed.deterlab.net/xsd">
      <classpath>
	<pathelement path="${all.classpath}"/>
	<pathelement location="${build.dir}/classes"/>
      </classpath>
    </java2wsdl>
  </target>

  <!-- generate any wsdl we need -->
  <target name="generate.wsdl" depends="generate.admin.wsdl,generate.apiinfo.wsdl,generate.circles.wsdl,generate.experiments.wsdl,generate.libraries.wsdl,generate.projects.wsdl,generate.resources.wsdl,generate.realizations.wsdl,generate.users.wsdl"/>

  <!-- check the dependencies on each generated access code -->
  <target name="check.access">
    <dependset>
      <srcfileset dir="${build.dir}">
	<include name="**/*.wsdl"/>
      </srcfileset>
      <targetfileset dir="${build.dir}/lib">
	<include name="**/*.jar"/>
      </targetfileset>
    </dependset>
  </target>

  <!-- check to see if the Admin-test-client.jar exists. Set
       admin.jar.exists, if so -->
  <target name="check.admin.jar" depends="check.access">
    <available file="${build.dir}/jar/Admin-test-client.jar"
      property="admin.jar.exists"/>
  </target>

  <!-- check to see if the ApiInfo-test-client.jar exists. Set
       apinifo.jar.exists, if so -->
  <target name="check.apiinfo.jar" depends="check.access">
    <available file="${build.dir}/jar/ApiInfo-test-client.jar"
      property="apiinfo.jar.exists"/>
  </target>

  <!-- check to see if the Circles-test-client.jar exists. Set
       users.jar.exists, if so -->
  <target name="check.circles.jar" depends="check.access">
    <available file="${build.dir}/jar/Circles-test-client.jar"
      property="circles.jar.exists"/>
  </target>

  <!-- check to see if the Experiments-test-client.jar exists. Set
       users.jar.exists, if so -->
  <target name="check.experiments.jar" depends="check.access">
    <available file="${build.dir}/jar/Experiments-test-client.jar"
      property="experiments.jar.exists"/>
  </target>

  <!-- check to see if the Libraries-test-client.jar exists. Set
       users.jar.exists, if so -->
  <target name="check.libraries.jar" depends="check.access">
    <available file="${build.dir}/jar/Libraries-test-client.jar"
      property="libraries.jar.exists"/>
  </target>


  <!-- check to see if the Projects-test-client.jar exists. Set
       users.jar.exists, if so -->
  <target name="check.projects.jar" depends="check.access">
    <available file="${build.dir}/jar/Projects-test-client.jar"
      property="projects.jar.exists"/>
  </target>


  <!-- check to see if the Resources-test-client.jar exists. Set
       users.jar.exists, if so -->
  <target name="check.resources.jar" depends="check.access">
    <available file="${build.dir}/jar/Resources-test-client.jar"
      property="resources.jar.exists"/>
  </target>

  <!-- check to see if the Realizations-test-client.jar exists. Set
       users.jar.exists, if so -->
  <target name="check.realizations.jar" depends="check.access">
    <available file="${build.dir}/jar/Realizations-test-client.jar"
      property="realizations.jar.exists"/>
  </target>

  <!-- check to see if the Users-test-client.jar exists. Set
       users.jar.exists, if so -->
  <target name="check.users.jar" depends="check.access">
    <available file="${build.dir}/jar/Users-test-client.jar"
      property="users.jar.exists"/>
  </target>

  <!-- for each generated WSDL file, use the wsdl2java utility to make client
       stubs, jar them up using the build.xml created by the wsdl2java utility
       and put a copy into build/lib.  These are used by utilities -->
  <!-- Admin -->
  <!-- These are all almost the same so we only document the first: -->
  <target name="generate.admin.jar" depends="generate.wsdl,check.admin.jar"
    unless="admin.jar.exists">
    <!-- clear out the access build directory so no old buildfiles or source is
       there -->
    <mkdir dir="${build.dir}/lib"/>
    <delete dir="${admin.dir}"/>
    <!--  make the java -->
    <exec executable="${AXIS2_HOME}/bin/wsdl2java.sh">
      <arg value="-uri"/>
      <arg value="${build.dir}/Admin.wsdl"/>
      <arg value="-o"/>
      <arg value="${admin.dir}"/>
      <arg value="-p"/>
      <arg value="net.deterlab.testbed.client"/>
      <arg value="-d"/>
      <arg value="adb"/>
      <arg value="-or"/>
    </exec>
    <!-- use the generated buildfile to make a jar file -->
    <ant dir="${admin.dir}"/>
    <!-- copy the jar out -->
    <copy toDir="${build.dir}/jar">
      <fileset dir="${admin.dir}/build/lib">
	<include name="**/*.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- ApiInfo -->
  <target name="generate.apiinfo.jar" depends="generate.wsdl,check.apiinfo.jar"
    unless="apiinfo.jar.exists">
    <!-- clear out the access build directory so no old buildfiles or source is
       there -->
    <mkdir dir="${build.dir}/lib"/>
    <delete dir="${apiinfo.dir}"/>
    <!--  make the java -->
    <exec executable="${AXIS2_HOME}/bin/wsdl2java.sh">
      <arg value="-uri"/>
      <arg value="${build.dir}/ApiInfo.wsdl"/>
      <arg value="-o"/>
      <arg value="${apiinfo.dir}"/>
      <arg value="-p"/>
      <arg value="net.deterlab.testbed.client"/>
      <arg value="-d"/>
      <arg value="adb"/>
      <arg value="-or"/>
    </exec>
    <!-- use the generated buildfile to make a jar file -->
    <ant dir="${apiinfo.dir}"/>
    <!-- copy the jar out -->
    <copy toDir="${build.dir}/jar">
      <fileset dir="${apiinfo.dir}/build/lib">
	<include name="**/*.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- Circles -->
  <target name="generate.circles.jar" depends="generate.wsdl,check.circles.jar"
    unless="circles.jar.exists">
    <delete dir="${circles.dir}"/>
    <exec executable="${AXIS2_HOME}/bin/wsdl2java.sh">
      <arg value="-uri"/>
      <arg value="${build.dir}/Circles.wsdl"/>
      <arg value="-o"/>
      <arg value="${circles.dir}"/>
      <arg value="-p"/>
      <arg value="net.deterlab.testbed.client"/>
      <arg value="-d"/>
      <arg value="adb"/>
      <arg value="-or"/>
    </exec>
    <ant dir="${circles.dir}"/>
    <copy toDir="${build.dir}/jar">
      <fileset dir="${circles.dir}/build/lib">
	<include name="**/*.jar"/>
      </fileset>
    </copy>
  </target> 

  <!-- Experiments -->
  <target name="generate.experiments.jar"
    depends="generate.wsdl,check.experiments.jar"
    unless="experiments.jar.exists">
    <delete dir="${experiments.dir}"/>
    <exec executable="${AXIS2_HOME}/bin/wsdl2java.sh">
      <arg value="-uri"/>
      <arg value="${build.dir}/Experiments.wsdl"/>
      <arg value="-o"/>
      <arg value="${experiments.dir}"/>
      <arg value="-p"/>
      <arg value="net.deterlab.testbed.client"/>
      <arg value="-d"/>
      <arg value="adb"/>
      <arg value="-or"/>
    </exec>
    <ant dir="${experiments.dir}"/>
    <copy toDir="${build.dir}/jar">
      <fileset dir="${experiments.dir}/build/lib">
	<include name="**/*.jar"/>
      </fileset>
    </copy>
  </target> 

  <!-- Libraries -->
  <target name="generate.libraries.jar"
    depends="generate.wsdl,check.libraries.jar"
    unless="libraries.jar.exists">
    <delete dir="${libraries.dir}"/>
    <exec executable="${AXIS2_HOME}/bin/wsdl2java.sh">
      <arg value="-uri"/>
      <arg value="${build.dir}/Libraries.wsdl"/>
      <arg value="-o"/>
      <arg value="${libraries.dir}"/>
      <arg value="-p"/>
      <arg value="net.deterlab.testbed.client"/>
      <arg value="-d"/>
      <arg value="adb"/>
      <arg value="-or"/>
    </exec>
    <ant dir="${libraries.dir}"/>
    <copy toDir="${build.dir}/jar">
      <fileset dir="${libraries.dir}/build/lib">
	<include name="**/*.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- Projects -->
  <target name="generate.projects.jar" 
    depends="generate.wsdl,check.projects.jar"
    unless="projects.jar.exists">
    <delete dir="${projects.dir}"/>
    <exec executable="${AXIS2_HOME}/bin/wsdl2java.sh">
      <arg value="-uri"/>
      <arg value="${build.dir}/Projects.wsdl"/>
      <arg value="-o"/>
      <arg value="${projects.dir}"/>
      <arg value="-p"/>
      <arg value="net.deterlab.testbed.client"/>
      <arg value="-d"/>
      <arg value="adb"/>
      <arg value="-or"/>
    </exec>
    <ant dir="${projects.dir}"/>
    <copy toDir="${build.dir}/jar">
      <fileset dir="${projects.dir}/build/lib">
	<include name="**/*.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- Resources -->
  <target name="generate.resources.jar"
    depends="generate.wsdl,check.resources.jar"
    unless="resources.jar.exists">
    <delete dir="${resources.dir}"/>
    <exec executable="${AXIS2_HOME}/bin/wsdl2java.sh">
      <arg value="-uri"/>
      <arg value="${build.dir}/Resources.wsdl"/>
      <arg value="-o"/>
      <arg value="${resources.dir}"/>
      <arg value="-p"/>
      <arg value="net.deterlab.testbed.client"/>
      <arg value="-d"/>
      <arg value="adb"/>
      <arg value="-or"/>
    </exec>
    <ant dir="${resources.dir}"/>
    <copy toDir="${build.dir}/jar">
      <fileset dir="${resources.dir}/build/lib">
	<include name="**/*.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- Realizations -->
  <target name="generate.realizations.jar"
    depends="generate.wsdl,check.realizations.jar"
    unless="realizations.jar.exists">
    <delete dir="${realizations.dir}"/>
    <exec executable="${AXIS2_HOME}/bin/wsdl2java.sh">
      <arg value="-uri"/>
      <arg value="${build.dir}/Realizations.wsdl"/>
      <arg value="-o"/>
      <arg value="${realizations.dir}"/>
      <arg value="-p"/>
      <arg value="net.deterlab.testbed.client"/>
      <arg value="-d"/>
      <arg value="adb"/>
      <arg value="-or"/>
    </exec>
    <ant dir="${realizations.dir}"/>
    <copy toDir="${build.dir}/jar">
      <fileset dir="${realizations.dir}/build/lib">
	<include name="**/*.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- Users -->
  <target name="generate.users.jar" depends="generate.wsdl,check.users.jar"
    unless="users.jar.exists">
    <delete dir="${users.dir}"/>
    <exec executable="${AXIS2_HOME}/bin/wsdl2java.sh">
      <arg value="-uri"/>
      <arg value="${build.dir}/Users.wsdl"/>
      <arg value="-o"/>
      <arg value="${users.dir}"/>
      <arg value="-p"/>
      <arg value="net.deterlab.testbed.client"/>
      <arg value="-d"/>
      <arg value="adb"/>
      <arg value="-or"/>
    </exec>
    <ant dir="${users.dir}"/>
    <copy toDir="${build.dir}/jar">
      <fileset dir="${users.dir}/build/lib">
	<include name="**/*.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- catchall to generate all access jars -->
  <target name="generate.access" 
    depends="generate.admin.jar,generate.apiinfo.jar,generate.circles.jar,generate.experiments.jar,generate.libraries.jar,generate.projects.jar,generate.resources.jar,generate.realizations.jar,generate.users.jar"/>
   <!-- clean up -->
  <target name="clean">
      <delete dir="${build.dir}"/>
      <delete dir="${doc.dir}"/>
      <delete dir="${devdoc.dir}"/>
      <delete dir="${admin.dir}"/>
      <delete dir="${apiinfo.dir}"/>
      <delete dir="${circles.dir}"/>
      <delete dir="${experiments.dir}"/>
      <delete dir="${libraries.dir}"/>
      <delete dir="${projects.dir}"/>
      <delete dir="${resources.dir}"/>
      <delete dir="${realizations.dir}"/>
      <delete dir="${users.dir}"/>
      <delete dir="${wsdl.dir}"/>
  </target>
</project>
